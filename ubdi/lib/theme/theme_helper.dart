import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.greenA700,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(3.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.primary.withOpacity(0.39),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 16.fSize,
          fontFamily: 'Bigshot One',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.primary.withOpacity(0.46),
          fontSize: 14.fSize,
          fontFamily: 'Antic Slab',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 10.fSize,
          fontFamily: 'Antic Slab',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 24.fSize,
          fontFamily: 'Bigshot One',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary.withOpacity(0.6),
          fontSize: 12.fSize,
          fontFamily: 'SF UI Display',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: colorScheme.primary.withOpacity(0.53),
          fontSize: 10.fSize,
          fontFamily: 'SF UI Display',
          fontWeight: FontWeight.w700,
        ),
        labelSmall: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 8.fSize,
          fontFamily: 'SF UI Display',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primary.withOpacity(0.6),
          fontSize: 20.fSize,
          fontFamily: 'Bigshot One',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Satoshi',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: colorScheme.errorContainer,
          fontSize: 14.fSize,
          fontFamily: 'Satoshi',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X0C000000),
    primaryContainer: Color(0XCC1C1939),
    secondaryContainer: Color(0XFF027FEE),

    // Error colors
    errorContainer: Color(0XF2979797),
    onError: Color(0XFFF5F5F5),

    // On colors(text colors)
    onPrimary: Color(0X6C2C2948),
    onPrimaryContainer: Color(0XFFF79E1B),
    onSecondaryContainer: Color(0XFF111111),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFFFC107);

  // Blacke
  Color get black9001e => Color(0X1E090909);

  // Blue
  Color get blue500 => Color(0XFF2095FD);
  Color get blue70019 => Color(0X19336CDB);

  // BlueGray
  Color get blueGray40033 => Color(0X338A959E);

  // DeepOrange
  Color get deepOrange400 => Color(0XFFE56C44);

  // DeepPurple
  Color get deepPurple300 => Color(0XFF8E71E0);
  Color get deepPurple30099 => Color(0X998F72E0);
  Color get deepPurpleA200 => Color(0XFF6550E0);

  // Gray
  Color get gray100 => Color(0XFFF7F7F7);
  Color get gray50 => Color(0XFFFAFAFA);
  Color get gray600 => Color(0XFF808080);
  Color get gray700 => Color(0XFF606060);
  Color get gray70001 => Color(0XFF616161);
  Color get gray800 => Color(0XFF4D4D4D);
  Color get gray80001 => Color(0XFF444444);

  // Green
  Color get green500 => Color(0XFF4CAF50);
  Color get greenA700 => Color(0XFF2CD35B);

  // Indigo
  Color get indigo300 => Color(0XFF7371E0);

  // LightBlue
  Color get lightBlue50 => Color(0XFFD2EAFF);

  // Red
  Color get red500 => Color(0XFFFF3B3B);
  Color get red700 => Color(0XFFE72222);

  // White
  Color get whiteA700 => Color(0XFFFDFDFD);
  Color get whiteA70001 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
